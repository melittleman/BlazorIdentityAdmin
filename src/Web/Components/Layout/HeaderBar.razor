@inject IdentityUserAccessor UserAccessor

<MudAppBar Elevation="0" Dense="true" Fixed="true" DisableGutters="true">
    <MudToolBar>

        @if (IncludeIcon)
        {
            <MudIconButton Href="/"
                Icon="@Icons.Custom.Brands.MudBlazor"
                Size="Size.Large"
                Color="Color.Primary" />
        }

    </MudToolBar>

    <MudSpacer />

    <MudToolBar Class="py-4">

        @if (IncludeSearch)
        {
            <MudTextField T="string"
                ValueChanged="@(t => OnSearchAsync(t))"
                Placeholder="Search"
                Margin="Margin.Dense"
                Variant="Variant.Outlined"
                Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Outlined.Search"
                IconSize="Size.Small"
                Class="my-0"
                Clearable="true"
                Immediate="true"
                DebounceInterval="500" />

            <MudDivider DividerType="DividerType.Middle" Vertical="true" />
        }

        <CustomThemeProvider Theme="theme" />

        <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" Href="https://github.com/melittleman/BlazorIdentityAdmin" Target="_blank" />

        <LoginDisplay User="user" />

    </MudToolBar>
</MudAppBar>

@code {

    // TODO: Figure out where this is loaded from? Somewhere on the tenant ideally.
    private CustomTheme theme = new();

    private User? user;

    [Parameter]
    public bool IncludeIcon { get; set; } = true;

    [Parameter]
    public bool IncludeSearch { get; set; } = false;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null)
        {
            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        }

        await base.OnInitializedAsync();
    }

    private Task OnSearchAsync(string value)
    {
        return Task.CompletedTask;
    }
}