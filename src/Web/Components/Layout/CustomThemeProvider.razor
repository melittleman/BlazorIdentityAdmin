@rendermode RenderMode.InteractiveServer

@* Prevents double popovers! *@
<CascadingValue Name="UsePopoverProvider" Value="false">

    <MudThemeProvider @bind-IsDarkMode="@_isDarkMode" Theme="_theme" DefaultScrollbar="false" />
</CascadingValue>

@if (_isDarkMode)
{
    <MudTooltip Text="Enable light mode" Color="Color.Primary" Placement="Placement.Bottom" Delay="750" Arrow="true">
        <MudIconButton aria-label="Enable light mode" Icon="@Icons.Material.Outlined.LightMode" Color="Color.Inherit" OnClick="(() => _isDarkMode = false)" />
    </MudTooltip>
}
else
{
    <MudTooltip Text="Enable dark mode" Color="Color.Primary" Placement="Placement.Bottom" Delay="750" Arrow="true">
        <MudIconButton aria-label="Enable dark mode" Icon="@Icons.Material.Outlined.DarkMode" Color="Color.Inherit" OnClick="(() => _isDarkMode = true)" />
    </MudTooltip>
}

@code {

    // TODO: We should initially load this from local storage / cookie.
    private bool _isDarkMode = true;
    private static MudTheme? _theme;

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    protected override void OnInitialized()
    {
        // TODO: Need to either go and load the custom theme parameters from the
        // tenant or introduce a 'fixed' CascadingValue that can be picked up here.
        CustomTheme theme = new();

        if (HttpContext is not null)
        {
            // We are in static SSR mode.

            if (HttpContext.Request.Path.StartsWithSegments("/admin"))
            {
                _theme = new AdminTheme(theme);
            }
            else
            {
                _theme = new MainTheme(theme);
            }
        }

        base.OnInitialized();
    }
}