@rendermode RenderMode.InteractiveServer

@* 
    This component only really exists because of a current limitation in MudBlazor with .NET 8
    where the @rendermode="RenderMode.InteractiveServer" attribute cannot be passed in directly
    to the <MudTextField> component with InputType of "Password", so we have to have this 'wrapper' 
    defined. Hopeful that this will be resolved soon though.

    Another issue is that the @bind-Value directive only works in an "InteractiveServer" render
    mode. But then it doesn't work with a Static SSR context! So to get around this, we have had
    to do model binding for when used via SignalR and the name="Something" pattern for when this
    surrounding form is going to be submitted over pure HTTP.
*@
<MudTextField T="string" Value="Value" name="@ValuePropertyName"
    Label="@Label"
    Variant="Variant.Outlined"
    InputType="@passwordInput"
    Class="mt-6"
    Adornment="Adornment.End"
    AdornmentIcon="@passwordInputIcon"
    OnAdornmentClick="TogglePasswordVisibility"
    ValueChanged="HandleValueChanged"
    autocomplete="@AutoComplete"
    aria-required="true" />

@code {

    private bool isPasswordVisible;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    [Parameter]
    public string Label { get; set; } = "Password";

    [Parameter]
    public string AutoComplete { get; set; } = "password";

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public string ValuePropertyName { get; set; } = "Input.Password";

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    private async Task HandleValueChanged(string value)
    {
        Value = value;
        await ValueChanged.InvokeAsync(value);
    }

    private void TogglePasswordVisibility()
    {
        if (isPasswordVisible)
        {
            isPasswordVisible = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
        else
        {
            isPasswordVisible = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
    }
}
