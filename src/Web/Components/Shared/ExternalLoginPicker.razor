@using AspNet.Security.OAuth.GitHub
@using Microsoft.AspNetCore.Authentication.Google
@using Microsoft.AspNetCore.Authentication.MicrosoftAccount

@inject SignInManager<User> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length is 0)
{
    <MudText Typo="Typo.subtitle1">
        There are no external authentication service providers configured. 
        <br />
        See <MudLink Typo="Typo.subtitle1" Href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</MudLink> about setting up this .NET application to support logging in via external services.
    </MudText>
}
else
{
    <MudText Typo="Typo.subtitle1" GutterBottom="true">Or login with</MudText>

    <form class="form-horizontal" action="/perform-external-login" method="post">

        <AntiforgeryToken />
        <input type="hidden" name="returnUrl" value="@ReturnUrl" />

        @foreach (AuthenticationScheme provider in externalLogins)
        {
            if (provider.Name.Equals(GitHubAuthenticationDefaults.AuthenticationScheme))
            {
                // TODO: Tooltip / aria label?
                <MudButton ButtonType="ButtonType.Submit"
                    Variant="Variant.Outlined"
                    EndIcon="@Icons.Custom.Brands.GitHub"
                    Size="Size.Medium"
                    Class="mx-2 github-button"
                    name="provider" 
                    value="@provider.Name"
                    title=@($"Login using your {provider.DisplayName} account")>
                    @provider.DisplayName
                </MudButton>
            }
            else if (provider.Name.Equals(GoogleDefaults.AuthenticationScheme))
            {
                <MudButton ButtonType="ButtonType.Submit"
                    Variant="Variant.Outlined"
                    EndIcon="@Icons.Custom.Brands.Google"
                    Size="Size.Medium"
                    Class="mx-2 google-button"
                    name="provider"
                    value="@provider.Name"
                    title=@($"Login using your {provider.DisplayName} account")>
                    @provider.DisplayName
                </MudButton>
            }
            else if (provider.Name.Equals(MicrosoftAccountDefaults.AuthenticationScheme))
            {
                <MudButton ButtonType="ButtonType.Submit"
                    Variant="Variant.Outlined"
                    EndIcon="@Icons.Custom.Brands.Microsoft"
                    Size="Size.Medium"
                    Class="mx-2 microsoft-button"
                    name="provider"
                    value="@provider.Name"
                    title=@($"Login using your {provider.DisplayName} account")>
                    @provider.DisplayName
                </MudButton>
            }
            else
            {
                <MudButton ButtonType="ButtonType.Submit" 
                    Variant="Variant.Outlined"
                    Size="Size.Medium"
                    Class="mx-2"
                    Color="Color.Tertiary"
                    name="provider" 
                    value="@provider.Name"
                    title=@($"Login using your {provider.DisplayName} account")>
                    @provider.DisplayName
                </MudButton>
            }
        }

    </form>
}

@code {

    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery(Name = "return_url")]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
