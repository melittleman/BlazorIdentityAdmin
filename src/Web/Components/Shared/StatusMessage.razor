@if (string.IsNullOrEmpty(DisplayMessage) is false)
{
    <MudAlert Severity="@Severity" Class="mt-6 mud-width-full" Elevation="4">

        @DisplayMessage

    </MudAlert>
}

@code {

    // Needs to be marked as static because this component could be rendered inside 
    // either a Static SSR or InteractiveServer component, so this forces the error 
    // message picked up from the HTTP Request to persist through to SignalR.
    private static string? messageFromCookie;

    [Parameter]
    public string? Message { get; set; }

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? DisplayMessage => Message ?? messageFromCookie;

    private bool IsError => DisplayMessage?.StartsWith("Error") is true;

    private Severity Severity => IsError 
        ? Severity.Error 
        : Severity.Info;

    protected override void OnInitialized()
    {
        if (HttpContext is not null)
        {
            messageFromCookie = HttpContext.Request.Cookies[IdentityRedirectManager.StatusCookieName];

            if (messageFromCookie is not null)
            {
                HttpContext.Response.Cookies.Delete(IdentityRedirectManager.StatusCookieName);
            }
        }
    }
}
