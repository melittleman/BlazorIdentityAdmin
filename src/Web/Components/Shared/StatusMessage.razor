@if (string.IsNullOrEmpty(DisplayMessage) is false)
{
    @* TODO: Can we / should we just use the Snackbar instead of a static alert? *@
    <MudAlert Variant="Variant.Outlined" Severity="@Severity" Dense="true" Class="my-3" Elevation="3" ShowCloseIcon="@ShowCloseIcon">

        @DisplayMessage

    </MudAlert>
}

@code {

    // Needs to be marked as static because this component could be rendered inside 
    // either a Static SSR or InteractiveServer component, so this forces the error 
    // message picked up from the HTTP Request to persist through to SignalR.
    private static string? messageFromCookie;

    [Parameter]
    public string? Message { get; set; }

    [Parameter]
    public bool ShowCloseIcon { get; set; } = false;

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    private string? DisplayMessage => Message ?? messageFromCookie;

    private Severity Severity => DisplayMessage switch
    {
        (string message) when message.StartsWith("Error") => Severity.Error,
        (string message) when message.StartsWith("Success") => Severity.Success,
        (string message) when message.StartsWith("Warning") => Severity.Warning,

        _ => Severity.Info
    };

    protected override void OnInitialized()
    {
        if (HttpContext is not null)
        {
            messageFromCookie = HttpContext.Request.Cookies[IdentityRedirectManager.StatusCookieName];

            if (messageFromCookie is not null)
            {
                HttpContext.Response.Cookies.Delete(IdentityRedirectManager.StatusCookieName);
            }
        }
    }
}
