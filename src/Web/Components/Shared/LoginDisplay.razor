@implements IDisposable
@inject NavigationManager Navigation
@rendermode RenderMode.InteractiveServer

<MudMenu AnchorOrigin="Origin.CenterCenter" Dense="true" Class="mt-1 ml-4">
    <ActivatorContent>

        @if (string.IsNullOrEmpty(AvatarUrl) is false)
        {
            <MudAvatar>
                    <MudImage Src="@AvatarUrl"></MudImage>
            </MudAvatar>
        }
        else
        {
            <MudAvatar>@User.Identity?.Name?.First()</MudAvatar>
        }

    </ActivatorContent>
    <ChildContent>
        <MudCard Elevation="0">
            <MudCardHeader>
                <CardHeaderAvatar>
                    @if (string.IsNullOrEmpty(AvatarUrl) is false)
                    {
                        <MudAvatar>
                            <MudImage Src="@AvatarUrl"></MudImage>
                        </MudAvatar>
                    }
                    else
                    {
                        <MudAvatar>@User.Identity?.Name?.First()</MudAvatar>
                    }
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText Typo="Typo.body2">@User.Identity?.Name</MudText>
                    <MudText Typo="Typo.caption">@User.FindFirstValue(OpenIddictConstants.Claims.Role)</MudText>
                </CardHeaderContent>
            </MudCardHeader>
        </MudCard>

        <MudDivider Class="mb-4" />

        <MudMenuItem Href="/account/profile" Icon="@Icons.Material.Outlined.Person">Profile</MudMenuItem>
        <MudMenuItem Href="@LogoutUrl" Icon="@Icons.Material.Outlined.Logout">Logout</MudMenuItem>
    </ChildContent>
</MudMenu>

@code {

    private string? AvatarUrl => User.FindFirstValue(OpenIddictConstants.Claims.Picture);

    [Parameter]
    public required ClaimsPrincipal User { get; set; }

    private string? currentUrl;
    private string LogoutUrl => string.IsNullOrEmpty(currentUrl) is false
        ? "/logout?returnUrl=" + currentUrl
        : "/logout";

    protected override Task OnInitializedAsync()
    {
        currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;

        return base.OnInitializedAsync();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = Navigation.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
