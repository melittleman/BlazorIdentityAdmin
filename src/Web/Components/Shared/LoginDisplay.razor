@implements IDisposable

@rendermode RenderMode.InteractiveServer

@inject NavigationManager Navigation

@if (User is not null)
{
    @* TODO: Add check for Admin role. This could actually be moved into the 'HeaderBar' component also? *@
    <MudIconButton Icon="@Icons.Material.Outlined.Settings" Color="Color.Inherit" Href="/admin" />

    <MudMenu AnchorOrigin="Origin.CenterCenter" Dense="true">
        <ActivatorContent>

            @if (string.IsNullOrEmpty(User.AvatarUrl) is false)
            {
                <MudAvatar>
                    <MudImage Src="@User.AvatarUrl"></MudImage>
                </MudAvatar>
            }
            else
            {
                <MudAvatar Variant="Variant.Outlined">
                    @User.FirstName?.First() @User.LastName?.First()
                </MudAvatar>
            }

        </ActivatorContent>
        <ChildContent>
            <MudCard Elevation="0">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        @if (string.IsNullOrEmpty(User.AvatarUrl) is false)
                        {
                            <MudAvatar>
                                <MudImage Src="@User.AvatarUrl"></MudImage>
                            </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Variant="Variant.Outlined">
                                @User.FirstName?.First() @User.LastName?.First()
                            </MudAvatar>
                        }
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.body1">@User.Name</MudText>
                        <MudText Typo="Typo.subtitle2" Class="mud-text-secondary">@User.UserName</MudText>

                        @* 
                            TODO: Add the role here if available...
                            <MudText Typo="Typo.caption">@User.FindFirstValue(OpenIddictConstants.Claims.Role)</MudText>
                        *@
                    </CardHeaderContent>
                </MudCardHeader>
            </MudCard>

            <MudDivider Class="mb-4" />

            <MudMenuItem Href="/account/profile" Icon="@Icons.Material.Outlined.Person">Profile</MudMenuItem>
            <MudMenuItem Href="@LogoutUrl" Icon="@Icons.Material.Outlined.Logout">Logout</MudMenuItem>
        </ChildContent>
    </MudMenu>
}

@code {

    [Parameter]
    public User? User { get; set; }

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    private static string? currentUrl;
    private string LogoutUrl => string.IsNullOrEmpty(currentUrl) is false && currentUrl.Contains("logout") is false
        ? "/logout?return_url=" + currentUrl
        : "/logout";

    protected override Task OnInitializedAsync()
    {
        Navigation.LocationChanged += OnLocationChanged;

        // We need a guard here because this method gets called twice, once from the 
        // HTTP Request, and the other from SignalR. So this prevents overwriting.
        if (HttpContext is not null)
        {
            currentUrl = HttpContext.Request.GetEncodedPathAndQuery();
        }

        return base.OnInitializedAsync();
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = "/" + Navigation.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }
}
