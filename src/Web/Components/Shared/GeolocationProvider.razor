@using Darnton.Blazor.DeviceInterop.Geolocation

@rendermode RenderMode.InteractiveServer
@inject IGeolocationService Geolocation

<input type="hidden" name="GeoLocationProvider.Latitude" value="@Latitude" />
<input type="hidden" name="GeoLocationProvider.Longitude" value="@Longitude" />

@code {

    [Parameter]
    public double Latitude { get; set; }

    [Parameter]
    public double Longitude { get; set; }

    [Parameter]
    public EventCallback<double> LatitudeChanged { get; set; }

    [Parameter]
    public EventCallback<double> LongitudeChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // JsInterop calls must be performed after 'first render' as
            // this is the indication that the SignalR circuit is up and 
            // connected after 'pre-rendering' has occurred.

            GeolocationResult geoResult = await Geolocation.GetCurrentPosition();
            if (geoResult.IsSuccess)
            {
                GeolocationCoordinates coordinates = geoResult.Position.Coords;

                Latitude = coordinates.Latitude;
                Longitude = coordinates.Longitude;

                await LatitudeChanged.InvokeAsync(Latitude);
                await LongitudeChanged.InvokeAsync(Longitude);

                StateHasChanged();
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}
