@using System.Globalization

@rendermode @(new InteractiveServerRenderMode(prerender: true))

@inject IdentityUserAccessor UserAccessor

@if (model is null)
{
    <!-- Username -->
    <MudSkeleton Animation="Animation.Wave" Width="100%" Height="56px" Class="mb-4" />

    <MudStack Row="true" AlignItems="AlignItems.Center">

        <!-- First Name -->
        <MudSkeleton Animation="Animation.Wave" Width="100%" Height="78px" Class="mb-4" />

        <!-- Last Name -->
        <MudSkeleton Animation="Animation.Wave" Width="100%" Height="78px" Class="mb-4" />

    </MudStack>

    <!-- Culture -->
    <MudSkeleton Animation="Animation.Wave" Width="100%" Height="78px" Class="mb-4" />

    <!-- Time Zone -->
    <MudSkeleton Animation="Animation.Wave" Width="100%" Height="62px" />

    <MudDivider DividerType="DividerType.Middle" Class="my-6" />

    <!-- Email Confirmed -->
    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Width="20px" Height="20px" Class="ma-3" />

    <!-- Phone Number Confirmed -->
    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Width="20px" Height="20px" Class="ma-3" />

    <!-- Authenticator Enabled -->
    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Width="20px" Height="20px" Class="ma-3" />

    <!-- Lockout Enabled -->
    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Width="20px" Height="20px" Class="ma-3" />
}
else
{
    <MudTextField @bind-Value="model.Username" For="@(() => model.Username)"
        id="profileUsernameInput" name="Model.Username"
        Label="Username"
        Variant="Variant.Outlined"
        InputType="InputType.Text"
        Class="mb-4"
        autocomplete="username"
        aria-required="true" />

    <MudStack Row="true" AlignItems="AlignItems.Center">

        <MudTextField @bind-Value="model.FirstName" For="@(() => model.FirstName)"
            id="profileFirstNameInput" name="Model.FirstName"
            Label="First Name"
            Variant="Variant.Outlined"
            InputType="InputType.Text"
            Class="mb-4"
            autocomplete="firstname" />

        <MudTextField @bind-Value="model.LastName" For="@(() => model.LastName)"
            id="profileLastNameInput" name="Model.LastName"
            Label="Last Name"
            Variant="Variant.Outlined"
            InputType="InputType.Text"
            Class="mb-4"
            autocomplete="lastname" />

    </MudStack>

    <!-- TODO: Should these potentially be autocomplete components instead? -->
    <MudSelect @bind-Value="model.Culture" For="@(() => model.Culture)"
        id="profileCultureInput" name="Model.Culture"
        Label="Language / Locale"
        Variant="Variant.Outlined"
        AnchorOrigin="Origin.BottomCenter"
        Class="mb-4">

        @foreach (CultureInfo culture in SpecificCultures.OrderBy(ci => ci.DisplayName))
        {
            <MudSelectItem Value="culture.Name">

                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">

                    <MudText Typo="Typo.body1">@culture.DisplayName</MudText>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">@culture.Name</MudText>
                </MudStack>
            </MudSelectItem>
        }

    </MudSelect>

    <MudSelect @bind-Value="model.TimeZone" For="@(() => model.TimeZone)"
        id="profileTimeZoneInput" name="Model.TimeZone"
        Label="Time Zone"
        Variant="Variant.Outlined"
        AnchorOrigin="Origin.BottomCenter">

        @foreach (TimeZoneInfo timeZone in TimeZones.OrderBy(tz => tz.DisplayName))
        {
            if (TimeZoneInfo.TryConvertWindowsIdToIanaId(timeZone.Id, out string? ianaId) && ianaId is not null)
            {
                <MudSelectItem Value="ianaId">

                    <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">

                        <MudText Typo="Typo.body1">@timeZone.DisplayName</MudText>
                    <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">@ianaId</MudText>
                </MudStack>
            </MudSelectItem>
            }
        }

    </MudSelect>

    @if (User is not null)
    {
        <MudDivider DividerType="DividerType.Middle" Class="my-6" />

        <MudSwitch @bind-Value="User.EmailConfirmed" Label="Email Confirmed" Color="Color.Success" Disabled="true" />
        <MudSwitch @bind-Value="User.PhoneNumberConfirmed" Label="Phone Number Confirmed" Color="Color.Success" Disabled="true" />
        <MudSwitch @bind-Value="User.TwoFactorEnabled" Label="Authenticator Enabled" Color="Color.Success" Disabled="true" />
        <MudSwitch @bind-Value="User.LockoutEnabled" Label="Lockout Enabled" Color="Color.Success" Disabled="true" />
    }
}

@code {

    private EditProfileModel? model;

    // We need to be very careful when marking properties / fields as "static" as they essentially become a Singleton
    // across every circuit in the entire application. I think this is fine for here though as everyone will get the 
    // same cached lists of Cultures and Time Zones to choose from.
    private static readonly CultureInfo[] SpecificCultures = CultureInfo.GetCultures(CultureTypes.SpecificCultures);

    private static readonly TimeZoneInfo[] TimeZones = [.. TimeZoneInfo.GetSystemTimeZones()];

    [Parameter]
    public User? User { get; set; }

    [Parameter]
    public string? DefaultCulture { get; set; }

    [Parameter]
    public string? DefaultTimeZone { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (User is not null)
        {
            model = new EditProfileModel()
            {
                Username = User.UserName,
                FirstName = User.FirstName,
                LastName = User.LastName,
                Culture = User.CultureName ?? DefaultCulture,
                TimeZone = User.TimezoneId ?? DefaultTimeZone
            };
        }

        await base.OnInitializedAsync();
    }
}
