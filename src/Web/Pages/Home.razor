@page "/"

@inject IPagedTicketStore TicketStore

<PageTitle>Home</PageTitle>

@*
    TODO: It's a shame there doesn't seem to be a better / more efficient way of doing this..
    I just want an 'AuthorizeView' that contains the 'AuthenticationProperties' in @context too.
*@
@if (auth is null || auth.Succeeded is false || auth.Principal.Identity?.IsAuthenticated is false)
{
    // Not Authenticated
    <MudText Typo="Typo.h1" GutterBottom="true">Hello, world!</MudText>
    <MudText Class="mb-8">Welcome to your new app, powered by MudBlazor and the .NET 8 Template!</MudText>
}
else
{
    // Authenticated
    <MudText Typo="Typo.h1" GutterBottom="true">Hello, @auth.Principal.Identity?.Name!</MudText>
    <MudText Class="mb-8">Welcome to your new app, powered by MudBlazor and the .NET 8 Template!</MudText>

    <MudDivider Class="mb-8" />

    <MudContainer MaxWidth="MaxWidth.Large">
        <MudText Typo="Typo.h2" GutterBottom="true">Session Information</MudText>

        <MudGrid Spacing="2">
            <MudItem Class="flex-auto">
                <MudCard Class="p-4" Style="height: 100%">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h3">Claims</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <ul>
                            @foreach (IGrouping<string, Claim> claimGroup in auth.Principal.Claims.GroupBy(a => a.Type))
                            {
                                foreach (string claimValue in claimGroup.Select(s => s.Value).Distinct())
                                {
                                    <li class="mb-3"><strong>@claimGroup.Key</strong>: @claimValue</li>
                                }
                            }
                        </ul>
                    </MudCardContent>
                </MudCard>
            </MudItem>
            <MudItem Class="flex-auto">
                <MudCard Class="p-4" Style="height: 100%">
                    <MudCardHeader>
                        <CardHeaderContent>
                            <MudText Typo="Typo.h3">Properties</MudText>
                        </CardHeaderContent>
                    </MudCardHeader>
                    <MudCardContent>
                        <ul>
                            @foreach ((string key, string? value) in auth.Properties.Items)
                            {
                                <li class="mb-3"><strong>@key</strong>: @value</li>
                            }
                        </ul>
                    </MudCardContent>
                </MudCard>
            </MudItem>
        </MudGrid>

        @if (tickets is not null)
        {
            // TODO: We can probably explicitely show that this ticket
            // is 'active' because it is available under auth.Ticket.

            foreach (AuthenticationTicket ticket in tickets)
            {
                <ul>

                    @* TODO: These probably all need moving into extension methods too. *@

                    @if (ticket.Properties.Items.ContainsKey("device.os"))
                    {
                        <li>@ticket.Properties.Items["device.os"]</li>
                    }

                    @if (ticket.Properties.Items.ContainsKey("device.browser"))
                    {
                        <li>@ticket.Properties.Items["device.browser"]</li>
                    }

                    @if (ticket.Properties.Items.ContainsKey("device.location"))
                    {
                        <li>@ticket.Properties.Items["device.location"]</li>
                    }

                    @if (ticket.Properties.Items.ContainsKey(".last_activity"))
                    {
                        <li>@ticket.Properties.Items[".last_activity"]</li>
                    }

                </ul>
            }
        }
    </MudContainer>
}

@code {

    private AuthenticateResult? auth;

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    private IPagedList<AuthenticationTicket>? tickets;

    protected override async Task OnInitializedAsync()
    {
        auth = await HttpContext.AuthenticateAsync();

        // string? userId = auth.Principal?.GetClaim(OpenIddictConstants.Claims.Subject);
        // vs.
        string? userId = auth.Principal?.FindFirstValue(OpenIddictConstants.Claims.Subject);
        // Which is better / more efficient?

        if (string.IsNullOrEmpty(userId) is false)
        {
            tickets = await TicketStore.GetByUserIdAsync(userId);
        }

        await base.OnInitializedAsync();
    }
}