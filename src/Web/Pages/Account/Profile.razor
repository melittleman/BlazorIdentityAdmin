@page "/account/profile"

@using BlazorIdentityAdmin.Infrastructure.Stores
@using BlazorIdentityAdmin.Web.Components.Account

@inject SignInManager<User> SignInManager
@inject IdentityRedirectManager RedirectManager
@inject IdentityUserAccessor UserAccessor
@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore

<PageTitle>Profile</PageTitle>

<MudPaper Elevation="3">

    @* We MUST have the 'Enhace' attribute on this form as otherwise the 'RedirectManger' doesn't work when it is submitted. *@
    <EditForm Model="Model" FormName="profile" id="profile-form" method="post" OnValidSubmit="UpdateAccountProfileAsync" Enhance="true">

        <DataAnnotationsValidator />

        <MudCard Class="pa-2">
            <MudCardHeader>

                <MudText Typo="Typo.h2">Profile</MudText>
            </MudCardHeader>
            <MudCardContent>

                <EditProfileDetails User="user"
                    DefaultCulture="@defaultCulture"
                    DefaultTimeZone="@defaultTimeZone" />

                <StatusMessage Message="@ErrorMessage" />
            </MudCardContent>
            <MudCardActions>

                @* 
                    TODO: This isn't actually wired up correctly, because we have no way to 
                    bind to the 'IsDisabled' property in this static page. Would potentially mean 
                    it makes sense to refactor this into an interactive pre-rendered one.
                *@
                <LoadingSubmitButton Variant="Variant.Outlined"
                    Icon="@Icons.Material.Outlined.Save"
                    Size="Size.Medium"
                    Text="Save Changes"
                    Class="ml-auto" 
                    IsFullWidth="false" />
            </MudCardActions>
        </MudCard>
    </EditForm>
</MudPaper>

@code {

    private User? user;
    private string? defaultCulture;
    private string? defaultTimeZone;

    private IEnumerable<IdentityError>? identityErrors;

    private string? ErrorMessage => identityErrors is not null 
        ? $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}"
        : null;

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private EditProfileModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null)
        {
            defaultCulture = HttpContext.User.FindFirstValue(OpenIddictConstants.Claims.Locale);
            defaultTimeZone = HttpContext.User.FindFirstValue(OpenIddictConstants.Claims.Zoneinfo);

            user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        }

        await base.OnInitializedAsync();
    }

    private async Task UpdateAccountProfileAsync()
    {
        // TODO: Show error...
        if (user is null || HttpContext is null) return;

        // TODO: I feel like these should be using the 'Manager' instead?
        // But the reasoning seems to be becuase the user hasn't actually been created yet.
        await UserStore.SetUserNameAsync(user, Model.Username, CancellationToken.None);

        if (UserStore is RedisUserStore store)
        {
            await store.SetFirstNameAsync(user, Model.FirstName, CancellationToken.None);
            await store.SetLastNameAsync(user, Model.LastName, CancellationToken.None);
            await store.SetCultureNameAsync(user, Model.Culture, CancellationToken.None);
            await store.SetTimezoneIdAsync(user, Model.TimeZone, CancellationToken.None);
        }

        // TODO: Can this actually just be 'Store.UpdateAsync'?
        IdentityResult result = await UserManager.UpdateSecurityStampAsync(user);

        if (result.Succeeded is false)
        {
            identityErrors = result.Errors;
            RedirectManager.RedirectToCurrentPageWithStatus(ErrorMessage!, HttpContext);
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Success: Your profile has been updated", HttpContext);
    }
}