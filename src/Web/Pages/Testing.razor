@page "/testing"

@attribute [AllowAnonymous]

<h3>Testing</h3>

<EditForm Model="Input" method="post" OnValidSubmit="HandleValidSubmit" FormName="testing">
    <DataAnnotationsValidator />

@*     <MudTextField @bind-Value="Model.Something" name="Model.Something" Label="Something" InputType="@InputType.Text" /> *@

@* 
    <MudTextField T="string" @bind-Value="Model.Something" name="Model.Something" Label="A TEST FIELD" InputType="InputType.Email" @rendermode="RenderMode.InteractiveServer" />
    <ValidationMessage For="() => Model.Something" class="mud-alert mud-alert-text-error" /> *@


    <MudTextField @bind-Value="Input.Email" name="Input.Email" @rendermode="RenderMode.InteractiveServer"
                  Label="Username or email"
                  Variant="Variant.Outlined"
                  InputType="InputType.Email"
                  Class="mt-6"
                  autocomplete="username"
                  aria-required="true" />

    <ValidationMessage For="() => Input.Email" class="mud-alert mud-alert-text-error" />


@*     <PasswordInput /> *@

@*     <MudTextField @bind-Value="@Model.Something" name="Model.Something"
                  Label="Password"
                  Variant="Variant.Outlined"
                  InputType="@passwordInput"
                  Class="mt-6"
                  Adornment="Adornment.End"
                  AdornmentIcon="@passwordInputIcon"
                  OnAdornmentClick="TogglePasswordVisibility"
                  autocomplete="current-password"
                  aria-required="true" /> *@

@*         <MudCheckBox T="bool" @rendermode="RenderMode.InteractiveServer"
            Label="Remember me?"
            Color="Color.Primary"
            Class="ml-n1 my-3" /> *@

    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">
        GO
    </MudButton>
</EditForm>

@code {

    private bool isPasswordVisible;
    private InputType passwordInput = InputType.Password;
    private string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    public class TestModel()
    {
        [Required]
        public string? Email { get; set; }
    }

    [SupplyParameterFromForm]
    public TestModel Input { get; set; } = new();

    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (HttpContext is not null)
        {

        }

        return base.OnInitializedAsync();
    }

    private async Task HandleValidSubmit(EditContext context)
    {
        if (HttpContext is not null)
        {
            
        }

        if (Input.Email is not null)
        {
            
        }

        if (context is not null)
        {
            
        }
    }

    private void TogglePasswordVisibility()
    {
        if (isPasswordVisible)
        {
            isPasswordVisible = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
        else
        {
            isPasswordVisible = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
    }
}
