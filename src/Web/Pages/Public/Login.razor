@page "/login"

@attribute [AllowAnonymous]
@rendermode RenderMode.InteractiveServer

@using Microsoft.AspNetCore.Localization
@using PSC.Blazor.Components.BrowserDetect
@using BlazorAdminDashboard.Web.Validation
@using BlazorAdminDashboard.Domain.Identity

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Login> Logger
@inject IJSRuntime JS

<PageTitle>Login</PageTitle>

@*
    TODO: This should be wrapped in an AuthorizeView...
*@

<MudStack Spacing="4" AlignItems="AlignItems.Center">
    <MudPaper Elevation="4" Class="pa-4" Width="100%">

        <!-- Login form -->
        <PublicFormHeader>
            <MudText Typo="Typo.h1" GutterBottom="true">Login</MudText>
            <MudText Typo="Typo.subtitle1">Don't have an account? <MudLink Typo="Typo.subtitle1" Href="@registerLink">Register</MudLink></MudText>
        </PublicFormHeader>

        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" FormName="login" id="login-form" method="post" OnValidSubmit="LoginUserAsync">

            @*
            TODO: This is a bit of a hack at the moment so that we can still use a Static SSR / HTTP POST form submit whilst
            inside an InteractiveServer rendered component. It looks as though this is planning on being fixed in .NET 9 though.
            See: https://github.com/dotnet/aspnetcore/issues/53129
            *@
            @if (HttpContext is null)
            {
                <input type="hidden" name="_handler" value="login" />
            }

            <DeviceInfoProvider />
            <GeolocationInfoProvider />
            <DataAnnotationsValidator />

            @* TODO: Update this to username or email lookup *@
            <MudTextField @bind-Value="Input.Email" name="Input.Email" @rendermode="RenderMode.InteractiveServer"
                Label="Username / Email" 
                Variant="Variant.Outlined" 
                InputType="InputType.Email"
                Class="mt-6"
                autocomplete="username"
                aria-required="true" />

            <ValidationMessage For="() => Input.Email" class="mud-alert mud-alert-text-error" />

            <PasswordInput @bind-Value="Input.Password"
                AutoComplete="current-password"
                Label="Password" />

            <ValidationMessage For="() => Input.Password" class="mud-alert mud-alert-text-error" />

            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            
                <MudCheckBox @bind-Value="Input.RememberMe" @rendermode="RenderMode.InteractiveServer"
                    name="Input.RememberMe"
                    TriState="false"
                    Label="Remember me?" 
                    Color="Color.Primary" 
                    Class="ml-n1 mt-3" />

                <MudLink Href="/forgot-password" Typo="Typo.subtitle1">Forgot password?</MudLink>
            </MudStack>

            <LoadingSubmitButton Text="Login" Icon="@Icons.Material.Outlined.Login" IsProcessing="isProcessing" />
        </EditForm>

    </MudPaper>
    <MudPaper Elevation="4" Class="pa-4" Width="100%">

        <!-- External logins -->
        <MudStack Spacing="1" AlignItems="AlignItems.Center">

            <ExternalLoginPicker />
        </MudStack>
    </MudPaper>

    <MudLink Href="/resend-email-confirmation" Typo="Typo.subtitle1">Resend email confirmation</MudLink>
</MudStack>

@* 
    TODO: Add this in once we have static user data that we can pre-populate the form with.
    <MudAlert Severity="Severity.Info" Class="mt-8 mud-width-full" Elevation="25">
        No authentication is required, click sign in.
    </MudAlert> 
*@

@code {

    // TODO: I think this is now large enough to be refactored into a 'code behind'.
    private bool isProcessing;
    private string? errorMessage;
    private string registerLink = "/register";

    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromForm]
    private LoginFormInput Input { get; set; } = new();

    [SupplyParameterFromForm]
    private DeviceInfo DeviceInfo { get; set; } = new();

    [SupplyParameterFromForm]
    private GeolocationInfo? GeolocationInfo { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is not null)
        {
            if (HttpMethods.IsGet(HttpContext.Request.Method))
            {
                // Clear the existing external cookie to ensure a clean login process
                await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
            }
        }

        registerLink = NavigationManager.GetUriWithQueryParameters(registerLink, new Dictionary<string, object?>
        {
            ["return_url"] = string.IsNullOrEmpty(ReturnUrl) is false ? ReturnUrl : "/login"
        });

        await base.OnInitializedAsync();
    }

    public async Task LoginUserAsync()
    {
        // See: https://github.com/dotnet/aspnetcore/issues/53129
        if (HttpContext is null)
        {
            isProcessing = true;

            IJSObjectReference loginForm = await JS.InvokeAsync<IJSObjectReference>("document.getElementById", "login-form");
            await loginForm.InvokeVoidAsync("submit");
            return;
        }

        // TODO: Email addresses aren't actually unique within
        // the application so this may cause us some issues.
        User? user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null) 
        {
            user = await UserManager.FindByNameAsync(Input.Email);
        }

        if (user is null)
        {
            // We can't actually tell the user that it was the 
            // email that was incorrect, otherwise they would be
            // able to figure out what accounts we actually have.
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Incorrect username or password.", HttpContext);
            return;
        }

        // Will lockout after 5 failed attempts by default...
        SignInResult result = await SignInManager.CheckPasswordSignInAsync(user, Input.Password, lockoutOnFailure: true);
        if (result.Succeeded is false)
        {
            HandleSignInResult(result);
            return;
        }

        DateTimeOffset authTime = DateTimeOffset.UtcNow;
        string? ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString();
        IRequestCultureFeature? culture = HttpContext.Features.Get<IRequestCultureFeature>();
        string? coordinates = GeolocationInfo?.GetCoordinates();

        if (DeviceInfo is not null && string.IsNullOrEmpty(ipAddress) is false)
        {
            Device device = new()
            {
                // Examples:
                // Windows 10 PC
                // Android 14.0 Mobile
                // iOS 17.3.1 Tablet
                OperatingSystem = $"{DeviceInfo.GetOperatingSystem()} {DeviceInfo.GetDeviceType()}",
                Browser = DeviceInfo.GetBrowser(),
                Fingerprint = DeviceInfo.GetFingerprint(),
                IpAddress = ipAddress,
                Location = coordinates,
                AccessedAt = authTime
            };

            if (user.TimezoneId is null && string.IsNullOrEmpty(DeviceInfo.TimeZone) is false)
            {
                user.TimezoneId = DeviceInfo.TimeZone;
            }

            if (user.CultureName is null && culture is not null)
            {
                user.CultureName = culture.RequestCulture.UICulture.Name;
            }

            AuthenticationProperties props = new()
            {
                IsPersistent = Input.IsRememberMeEnabled                    
            };

            if (SignInManager is CustomSignInManager custom)
            {                
                result = await custom.SignInDeviceOrTwoFactorAsync(user, device, props);
            }

            HandleSignInResult(result);
        }
    }

    private void HandleSignInResult(SignInResult result)
    {
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsNotAllowed)
        {
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Your must confirm your account to login.", HttpContext);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("/login-with-2fa", new Dictionary<string, object?>()
            { 
                ["return_url"] = ReturnUrl,
                ["rememberMe"] = Input.RememberMe 
            });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("/lockout");
        }
        else
        {
            // We can't actually tell the user what was wrong as they 
            // could then be able to tell that a username / email was correct.
            RedirectManager.RedirectToCurrentPageWithStatus("Error: Incorrect username or password.", HttpContext);
        }
    }
}
