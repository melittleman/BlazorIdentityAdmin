@page "/forgot-password"

@inject UserManager<User> UserManager
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@attribute [AllowAnonymous]

<PageTitle>Forgot Password?</PageTitle>

<MudStack Spacing="4" AlignItems="AlignItems.Center">
    <MudPaper Elevation="4" Class="pa-4" Width="100%">

        <PublicFormHeader>
            <MudText Typo="Typo.h1" GutterBottom="true">Forgot Password?</MudText>
            <MudText Typo="Typo.subtitle1">Enter your email below to reset your password.</MudText>
        </PublicFormHeader>

        <EditForm Model="Input" FormName="forgot-password" OnValidSubmit="ResetPasswordAsync" method="post" Enhance="true">

            <DataAnnotationsValidator />

            <MudTextField T="string" @bind-Value="Input.Email"
                Label="Email"
                Variant="Variant.Outlined"
                InputType="InputType.Email"
                Class="my-6"
                autocomplete="username"
                aria-required="true" />

            <ValidationMessage For="() => Input.Email" class="mud-alert mud-alert-error" />

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">
                Forgot Password
            </MudButton>
        </EditForm>
    </MudPaper>
</MudStack>

@code {

    [SupplyParameterFromForm]
    private ForgotPasswordFormInput Input { get; set; } = new();

    private async Task ResetPasswordAsync()
    {
        // TODO: Get by username or email
        User? user = await UserManager.FindByEmailAsync(Input.Email);

        if (user is null || !(await UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            RedirectManager.RedirectTo("/forgot-password-confirmation");
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        string code = await UserManager.GeneratePasswordResetTokenAsync(user);

        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

        string callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("/reset-password").AbsoluteUri,
            new Dictionary<string, object?> 
            { 
                ["code"] = code 
            });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        RedirectManager.RedirectTo("/forgot-password-confirmation");
    }
}
