@page "/external-login"

@attribute [AllowAnonymous]
@rendermode RenderMode.InteractiveServer

@using BlazorAdminDashboard.Infrastructure.Stores
@using Microsoft.AspNetCore.Localization

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger
@inject IJSRuntime JS

<PageTitle>Register</PageTitle>

@* TODO: Break these down into separate components... *@

@if (externalLoginInfo is null)
{
    // TODO: Skeleton?
    <MudText Typo="Typo.h6">Loading...</MudText>
    <MudProgressCircular Color="Color.Inherit" Indeterminate="true" />
}
else if (existingUser is not null)
{
    <MudStack Spacing="4" AlignItems="AlignItems.Center">
        <MudPaper Elevation="4" Class="pa-4" Width="100%">

            <PublicFormHeader AvatarUrl="@existingUser.AvatarUrl">

                <MudText Typo="Typo.h1" GutterBottom="true">Welcome Back!</MudText>
                <MudText Typo="Typo.subtitle1">Logging in as @existingUser.Name</MudText>
            </PublicFormHeader>

            <MudStack Spacing="2" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h6">Please wait whilst we login to your @ProviderDisplayName account...</MudText>
                <MudProgressCircular Color="Color.Inherit" Indeterminate="true" />
            </MudStack>
        </MudPaper>
    </MudStack>

    <EditForm Model="Input" FormName="confirmation" id="confirmation-form" method="post" OnSubmit="LoginExistingUserAsync">

        @if (HttpContext is null)
        {
            <input type="hidden" name="_handler" value="confirmation" />
        }

        @*
            TODO: Do we also want to 'wait' for the Geolocation information from the browser?
            Definitely not as important as the Device Info because the user can deny access
            to their location so this may never actually complete.
        *@
        <GeolocationInfoProvider InfoChanged="HandleGeoInfoChanged"/>
        <DeviceInfoProvider OnInfoComplete="HandleDeviceInfoComplete" />

        <input type="hidden" name="Input.Username" value="@Input.Username" />
        <input type="hidden" name="Input.Email" value="@Input.Email" />
        <input type="hidden" name="Input.FirstName" value="@Input.FirstName" />
        <input type="hidden" name="Input.LastName" value="@Input.LastName" />
        <input type="hidden" name="Input.Picture" value="@Input.Picture" />
        <input type="hidden" name="Input.Locale" value="@Input.Locale" />
    </EditForm>
}
else
{
    <MudStack Spacing="4" AlignItems="AlignItems.Center">
        <MudPaper Elevation="4" Class="pa-4" Width="100%">

            <PublicFormHeader>
                <MudText Typo="Typo.h1" GutterBottom="true">Register</MudText>
                <MudText Typo="Typo.subtitle1">Associate your @ProviderDisplayName account.</MudText>
            </PublicFormHeader>

            @* TODO: We could probably just use the 'StatusMessage' component for this too? But it might need a RenderFragment passing in. *@
            <MudAlert Severity="Severity.Info" Class="mt-8 mud-width-full" Elevation="4">
                You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
                Please enter or amend your details below and click Register to finish logging in.
            </MudAlert>

            <EditForm Model="Input" FormName="confirmation" id="confirmation-form" method="post" OnValidSubmit="RegisterNewUserAsync">

                @if (HttpContext is null)
                {
                    <input type="hidden" name="_handler" value="confirmation" />
                }

                <DeviceInfoProvider />
                <GeolocationInfoProvider />
                <DataAnnotationsValidator />

                <MudTextField T="string" @bind-Value="Input.Username" name="Input.Username"
                    Label="Username"
                    Variant="Variant.Outlined"
                    InputType="InputType.Text"
                    Class="mt-6"
                    autocomplete="username"
                    aria-required="true" />

                <ValidationMessage For="() => Input.Username" class="mud-alert mud-alert-text-error" />

                <MudTextField T="string" @bind-Value="Input.Email" name="Input.Email"
                    Label="Email"
                    Variant="Variant.Outlined"
                    InputType="InputType.Email"
                    Class="mt-6"
                    autocomplete="email"
                    aria-required="true" />

                <ValidationMessage For="() => Input.Email" class="mud-alert mud-alert-text-error" />

                <MudTextField T="string" @bind-Value="Input.FirstName" name="Input.FirstName"
                    Label="First Name"
                    Variant="Variant.Outlined"
                    InputType="InputType.Text"
                    Class="mt-6"
                    autocomplete="first-name"
                    aria-required="true" />

                <ValidationMessage For="() => Input.FirstName" class="mud-alert mud-alert-text-error" />

                <MudTextField T="string" @bind-Value="Input.LastName" name="Input.LastName"
                    Label="Last Name"
                    Variant="Variant.Outlined"
                    InputType="InputType.Text"
                    Class="mt-6"
                    autocomplete="last-name"
                    aria-required="true" />

                <ValidationMessage For="() => Input.LastName" class="mud-alert mud-alert-text-error" />

                <input type="hidden" name="Input.Picture" value="@Input.Picture" />
                <input type="hidden" name="Input.Locale" value="@Input.Locale" />

                @* Link for T&C's / Privacy *@
                <MudCheckBox T="bool" @bind-Value="agreeToTerms"
                    Label="I agree to Terms & Conditions" 
                    Color="Color.Primary" 
                    Class="ml-n1 mt-3" />

                <StatusMessage Message="@ErrorMessage" />

                <LoadingSubmitButton Text="Register" 
                    Icon="@Icons.Material.Outlined.AppRegistration" 
                    IsProcessing="isProcessing" 
                    IsDisabled="@(!agreeToTerms)" />
            </EditForm>
        </MudPaper>
    </MudStack>
}

@code {

    public const string LoginCallbackAction = "LoginCallback";

    private bool isProcessing = false;
    private bool agreeToTerms = false;

    private bool deviceInfoComplete = false;
    private bool geoInfoComplete = false;

    private static User? validatedUser;
    private static User? existingUser;
    private static ExternalLoginInfo? externalLoginInfo;

    private IEnumerable<IdentityError>? identityErrors;

    private string? ErrorMessage => identityErrors is null 
        ? null 
        : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private string? ProviderDisplayName => externalLoginInfo?.ProviderDisplayName;

    [CascadingParameter]
    private HttpContext? HttpContext { get; set; }

    // Static property to persist values through to 
    // SignalR after being set from HttpContext.
    [SupplyParameterFromForm]
    private static ExternalLoginFormInput Input { get; set; } = new();

    [SupplyParameterFromForm]
    private DeviceInfo DeviceInfo { get; set; } = new();

    [SupplyParameterFromForm]
    private GeolocationInfo? GeolocationInfo { get; set; }

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery(Name = "return_url")]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // We only want to execute this on the very first HTTP Request, 
        // not the subsequent SignalR initialization or any form POSTs.
        if (HttpContext is not null && HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (RemoteError is not null)
            {
                RedirectManager.RedirectToWithStatus("/login", $"Error from external provider: {RemoteError}", HttpContext);
            }

            ExternalLoginInfo? info = await SignInManager.GetExternalLoginInfoAsync();
            if (info is null)
            {
                RedirectManager.RedirectToWithStatus("/login", "Error loading external login information.", HttpContext);
            }

            externalLoginInfo = info;

            existingUser = await UserManager.FindByLoginAsync(
                externalLoginInfo.LoginProvider,
                externalLoginInfo.ProviderKey);

            if (existingUser is not null)
            {
                // User already exists.
                // Need to stop here to allow the browser render to continue
                // which will send back the Device and Geolocation info.

                Input.Username = existingUser.UserName ?? string.Empty;
                Input.Email = existingUser.Email;
                Input.FirstName = existingUser.FirstName;
                Input.LastName = existingUser.FirstName;

                if (SignInManager is CustomSignInManager custom) 
                {
                    SignInResult? result = await custom.CheckSignInAsync(existingUser);

                    if (result?.IsLockedOut is true) 
                    {
                        RedirectManager.RedirectTo("/lockout");
                    }
                }
            }
            else
            {
                if (Action == LoginCallbackAction)
                {
                    OnLoginCallback();
                }
                else
                {
                    // We should only reach this page via the login callback, so redirect back to
                    // the login page if we get here some other way.
                    RedirectManager.RedirectTo("/login");
                }
            }
        }

        await base.OnInitializedAsync();
    }

    private async Task HandleDeviceInfoComplete(DeviceInfo info)
    {
        deviceInfoComplete = true;

        // TODO: Do we need to be concerned about the fact that this will 'hang' until
        // the user either accepts or rejects the sharing of their location?
        if (deviceInfoComplete && geoInfoComplete) 
        {
            // We can automatically submit the form in this instance because the
            // user already exists, we just needed to wait for the render to complete
            // in order to capture the device information.
            await SubmitFormAsync();
        }   
    }

    private async Task HandleGeoInfoChanged(GeolocationInfo info)
    {
        geoInfoComplete = true;

        if (deviceInfoComplete && geoInfoComplete)
        {
            await SubmitFormAsync();
        }
    }

    private void OnLoginCallback()
    {
        if (externalLoginInfo is null) return;

        // If the user does not have an account, then ask the user to create an account.
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == OpenIddictConstants.Claims.Email))
        {
            string email = externalLoginInfo.Principal.FindFirstValue(OpenIddictConstants.Claims.Email) ?? string.Empty;

            Input.Username = email;
            Input.Email = email;
        }

        // TODO: Enforce uniqueness on the 'Username', potentially via a custom validator?
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == OpenIddictConstants.Claims.PreferredUsername))
        {
            Input.Username = externalLoginInfo.Principal.FindFirstValue(OpenIddictConstants.Claims.PreferredUsername) ?? string.Empty;
        }

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == OpenIddictConstants.Claims.Name))
        {
            string name = externalLoginInfo.Principal.FindFirstValue(OpenIddictConstants.Claims.Name) ?? string.Empty;
            string[] firstAndLastNames = name.Split(' ', 2, StringSplitOptions.TrimEntries);

            Input.FirstName = firstAndLastNames[0];
            Input.LastName = firstAndLastNames[1];
        }

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == OpenIddictConstants.Claims.GivenName))
        {
            Input.FirstName = externalLoginInfo.Principal.FindFirstValue(OpenIddictConstants.Claims.GivenName) ?? string.Empty;
        }

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == OpenIddictConstants.Claims.FamilyName))
        {
            Input.LastName = externalLoginInfo.Principal.FindFirstValue(OpenIddictConstants.Claims.FamilyName) ?? string.Empty;
        }

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == OpenIddictConstants.Claims.Picture))
        {
            Input.Picture = externalLoginInfo.Principal.FindFirstValue(OpenIddictConstants.Claims.Picture) ?? string.Empty;
        }

        if (externalLoginInfo.Principal.HasClaim(c => c.Type == OpenIddictConstants.Claims.Locale))
        {
            Input.Locale = externalLoginInfo.Principal.FindFirstValue(OpenIddictConstants.Claims.Locale) ?? string.Empty;
        }
    }

    private async Task LoginExistingUserAsync()
    {
        if (existingUser is null || externalLoginInfo is null) return;

        Logger.LogInformation(
            "Logging in {User} with their {Name} account.", 
            existingUser.Name,
            externalLoginInfo.LoginProvider);

        await LoginDeviceAsync(existingUser);
    }

    private async Task RegisterNewUserAsync()
    {
        if (externalLoginInfo is null) return;

        IdentityResult result = new();

        if (HttpContext is null)
        {
            User user = await CreateUserAsync();

            // This is the initial SignalR form submit.
            if (UserManager is CustomUserManager custom)
            {
                result = await custom.ValidateAsync(user);
            }

            if (result.Succeeded is false)
            {
                // We want to perform the validation first before actually creating the user so that we can use SignalR
                // to update with the error messages should there be any, which in turn keeps the state of the form.
                identityErrors = result.Errors;
                return;
            }

            validatedUser = user;

            // If we made it this far, we now need to properly submit the form as
            // the login process requires the HttpContext to set identity cookies.
            await SubmitFormAsync();
            return;
        }

        if (validatedUser is null) return;

        result = await UserManager.CreateAsync(validatedUser);

        if (result.Succeeded is false)
        {
            // However, by this point we can't actually use the 'ErrorMessage' field because we aren't inside a SignalR circuit...
            // So we might want to look into an alternative such as URL / Query String to persist the form state.
            identityErrors = result.Errors;
            RedirectManager.RedirectToCurrentPageWithStatus(ErrorMessage!, HttpContext);
            return;
        }

        result = await UserManager.AddLoginAsync(validatedUser, externalLoginInfo);

        if (result.Succeeded is false)
        {
            identityErrors = result.Errors;
            RedirectManager.RedirectToCurrentPageWithStatus(ErrorMessage!, HttpContext);
            return;
        }

        Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

        await LoginDeviceAsync(validatedUser);
    }

    private async Task<User> CreateUserAsync()
    {
        User user = new();

        // TODO: I feel like these should be using the 'Manager' instead?
        // But the reasoning seems to be becuase the user hasn't actually been created yet.
        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);

        if (UserStore is IUserEmailStore<User> emailStore)
        {
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        }

        // TODO: Should potentially be changed to CustomUserStore to his implementation?
        // Or even better, and ICustomUserStore interface?
        if (UserStore is RedisUserStore store)
        {
            if (string.IsNullOrWhiteSpace(Input.FirstName) is false)
            {
                await store.SetFirstNameAsync(user, Input.FirstName, CancellationToken.None);
            }

            if (string.IsNullOrWhiteSpace(Input.LastName) is false)
            {
                await store.SetLastNameAsync(user, Input.LastName, CancellationToken.None);
            }

            if (string.IsNullOrWhiteSpace(Input.Picture) is false)
            {
                await store.SetAvatarUrlAsync(user, Input.Picture, CancellationToken.None);
            }

            // TODO: Should we actually accept the 'locale' coming from the IDP?
            if (string.IsNullOrWhiteSpace(Input.Locale) is false)
            {
                await store.SetCultureNameAsync(user, Input.Locale, CancellationToken.None);
            }
        }

        return user;
    }

    private async Task SubmitFormAsync()
    {
        // We are not in a SignalR circuit if HttpContext is valid.
        if (HttpContext is not null) return;

        isProcessing = true;

        // See: https://github.com/dotnet/aspnetcore/issues/53129
        IJSObjectReference loginForm = await JS.InvokeAsync<IJSObjectReference>("document.getElementById", "confirmation-form");
        await loginForm.InvokeVoidAsync("submit");
    }

    private async Task LoginDeviceAsync(User user)
    {
        if (HttpContext is null || externalLoginInfo is null) return;

        DateTimeOffset authTime = DateTimeOffset.UtcNow;
        string? ipAddress = HttpContext.Connection.RemoteIpAddress?.ToString();
        IRequestCultureFeature? culture = HttpContext.Features.Get<IRequestCultureFeature>();
        string? coordinates = GeolocationInfo?.GetCoordinates();

        if (DeviceInfo is not null && string.IsNullOrEmpty(ipAddress) is false)
        {
            Device device = new()
            {
                OperatingSystem = $"{DeviceInfo.GetOperatingSystem()} {DeviceInfo.GetDeviceType()}",
                Browser = DeviceInfo.GetBrowser(),
                Fingerprint = DeviceInfo.GetFingerprint(),
                IpAddress = ipAddress,
                Location = coordinates,
                AccessedAt = authTime
            };

            if (string.IsNullOrEmpty(DeviceInfo.TimeZone) is false)
            {
                // TODO: What should we do about this setting?
                // Should we always save it against the user,
                // or should we only save it if they have not set it before,
                // or should we never save it, and make them always do it manually?
                user.TimezoneId = DeviceInfo.TimeZone;
            }

            // TODO: Which 'culture / locale' do we actually want to prioritize here?
            // The one provided by the users browser, vs directly from the 3rd party IDP.
            if (culture is not null && string.IsNullOrEmpty(Input.Locale))
            {
                // TODO: Same here, need to figure out where this initially comes from
                // and how it is persisted to the users account. I think this is fine
                // for the time being just to save it in the ClaimsPrincipal.
                user.CultureName = culture.RequestCulture.UICulture.Name;
            }

            // TODO: When should this be set to persistent = true, if ever?
            // Maybe if the email has been verified?
            AuthenticationProperties props = new()
            {
                IsPersistent = false

                // TODO: I don't think we want to set 'AllowRefresh'
                // to true when this user hasn't logged in with a
                // password and doesn't have a confirmed email?
            };

            if (externalLoginInfo.AuthenticationTokens is not null)
            {
                props.StoreTokens(externalLoginInfo.AuthenticationTokens);
            }

            string userId = await UserManager.GetUserIdAsync(user);
            string code = await UserManager.GenerateEmailConfirmationTokenAsync(user);

            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

            string callbackUrl = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("/confirm-email").AbsoluteUri,
                new Dictionary<string, object?>
                {
                    ["userId"] = userId,
                    ["code"] = code
                });

            if (string.IsNullOrEmpty(Input.Email) is false)
            {
                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));
            }

            // If account confirmation is required, we need to show the link if we don't have a real email sender
            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo("/register-confirmation", new Dictionary<string, object?>()
                {
                    ["email"] = Input.Email
                });
            }

            if (SignInManager is CustomSignInManager custom)
            {
                await custom.SignInDeviceOrTwoFactorAsync(user, device, props, externalLoginInfo.LoginProvider, true);
            }

            RedirectManager.RedirectTo(ReturnUrl);
        }
    }
}
