@page "/external-login"

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject IEmailSender<User> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ExternalLogin> Logger

@attribute [AllowAnonymous]

<PageTitle>Register</PageTitle>

<MudStack Spacing="4" AlignItems="AlignItems.Center">
    <MudPaper Elevation="4" Class="pa-4" Width="100%">

        <PublicFormHeader>
            <MudText Typo="Typo.h1" GutterBottom="true">Register</MudText>
            <MudText Typo="Typo.subtitle1">Associate your @ProviderDisplayName account.</MudText>
        </PublicFormHeader>

        <StatusMessage Message="@message" />

        @* TODO: We could probably just use the 'StatusMessage' component for this too? But it might need a RenderFragment passing in. *@
        <MudAlert Severity="Severity.Info" Class="mt-8 mud-width-full" Elevation="4">
            You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
            Please confirm or enter an email address below and click the Register button to finish logging in.
        </MudAlert>

        <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post" Enhance="true">

            <DataAnnotationsValidator />

            @* TODO: Need to also add the ability to enter a unique username if not provided. *@

            <MudTextField T="string" @bind-Value="Input.Email"
                Label="Email"
                Variant="Variant.Outlined"
                InputType="InputType.Email"
                Class="mt-6"
                autocomplete="email"
                aria-required="true" />

            <ValidationMessage For="() => Input.Email" class="mud-alert mud-alert-text-error" />

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">
                Register
            </MudButton>
        </EditForm>
    </MudPaper>
</MudStack>

@code {

    public const string LoginCallbackAction = "LoginCallback";

    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private ExternalLoginFormInput Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            RedirectManager.RedirectToWithStatus("/login", $"Error from external provider: {RemoteError}", HttpContext);
        }

        ExternalLoginInfo? info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            RedirectManager.RedirectToWithStatus("/login", "Error loading external login information.", HttpContext);
        }

        externalLoginInfo = info;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }

            // We should only reach this page via the login callback, so redirect back to
            // the login page if we get here some other way.
            RedirectManager.RedirectTo("/login");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        // Sign in the user with this external login provider if the user already has a login.
        var result = await SignInManager.ExternalLoginSignInAsync(
            externalLoginInfo.LoginProvider,
            externalLoginInfo.ProviderKey,
            isPersistent: false,
            bypassTwoFactor: true);

        if (result.Succeeded)
        {
            Logger.LogInformation(
                "{Name} logged in with {LoginProvider} provider.",
                externalLoginInfo.Principal.Identity?.Name,
                externalLoginInfo.LoginProvider);

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            RedirectManager.RedirectTo("/lockout");
        }

        // If the user does not have an account, then ask the user to create an account.
        if (externalLoginInfo.Principal.HasClaim(c => c.Type == ClaimTypes.Email))
        {
            Input.Email = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email) ?? "";
        }
    }

    private async Task OnValidSubmitAsync()
    {
        User user = new();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);

        if (UserStore is IUserEmailStore<User> emailStore)
        {
            await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        }

        IdentityResult result = await UserManager.CreateAsync(user);

        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);

            if (result.Succeeded)
            {
                Logger.LogInformation("User created an account using {Name} provider.", externalLoginInfo.LoginProvider);

                string userId = await UserManager.GetUserIdAsync(user);
                string code = await UserManager.GenerateEmailConfirmationTokenAsync(user);

                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));

                var callbackUrl = NavigationManager.GetUriWithQueryParameters(
                    NavigationManager.ToAbsoluteUri("/confirm-email").AbsoluteUri,
                    new Dictionary<string, object?> 
                    { 
                        ["userId"] = userId, 
                        ["code"] = code 
                    });

                await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

                // If account confirmation is required, we need to show the link if we don't have a real email sender
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    RedirectManager.RedirectTo("/register-confirmation", new Dictionary<string, object?>() 
                    { 
                        ["email"] = Input.Email 
                    });
                }

                // TODO: I think this can be safely removed as we don't actually want the registration process
                // to just automatically log the user in, as there is a lot of functionality on the Login page
                // e.g. Device / Geo information and Remember Me that we want the user to pass through.
                //await SignInManager.SignInAsync(user, isPersistent: false, externalLoginInfo.LoginProvider);

                RedirectManager.RedirectTo(ReturnUrl);
            }
        }

        message = $"Error: {string.Join(",", result.Errors.Select(error => error.Description))}";
    }
}
