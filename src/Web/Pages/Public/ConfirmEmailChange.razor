@page "/confirm-email-change"

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject IdentityRedirectManager RedirectManager

@attribute [AllowAnonymous]

@* TODO: Could this actually be merged with the existing 'confirm-email' page? *@

<PageTitle>Confirm Email Change</PageTitle>

<MudStack Spacing="4" AlignItems="AlignItems.Center">
    <MudPaper Elevation="4" Class="pa-4" Width="100%">

        <PublicFormHeader>
            <MudText Typo="Typo.h1" Class="py-4">Confirm Email Change</MudText>
        </PublicFormHeader>

        <StatusMessage Message="@message" />
    </MudPaper>
</MudStack>

@code {

    private string? message;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? UserId { get; set; }

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (UserId is null || Email is null || Code is null)
        {
            RedirectManager.RedirectToWithStatus(
                "/login", 
                "Error: Invalid email change confirmation link.", 
                HttpContext);
        }

        User? user = await UserManager.FindByIdAsync(UserId);

        if (user is null)
        {
            message = "Unable to find user with Id '{userId}'";
            return;
        }

        string code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
        IdentityResult result = await UserManager.ChangeEmailAsync(user, Email, code);

        if (!result.Succeeded)
        {
            message = "Error changing email.";
            return;
        }

        // In our UI email and user name are one and the same, so when we update the email
        // we need to update the user name.
        IdentityResult setUserNameResult = await UserManager.SetUserNameAsync(user, Email);

        if (setUserNameResult.Succeeded is false)
        {
            message = "Error changing user name.";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        message = "Thank you for confirming your email change.";
    }
}
