@page "/reset-password"

@inject IdentityRedirectManager RedirectManager
@inject UserManager<User> UserManager

<PageTitle>Reset Password</PageTitle>

<MudStack Spacing="4" AlignItems="AlignItems.Center">
    <MudPaper Elevation="4" Class="pa-4" Width="100%">

        <PublicFormHeader>
            <MudText Typo="Typo.h1" GutterBottom="true">Reset Password</MudText>
            <MudText Typo="Typo.subtitle1">Enter your new password</MudText>
        </PublicFormHeader>

        <StatusMessage Message="@Message" />

        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="ResetPasswordAsync" method="post" Enhance="true">

            <DataAnnotationsValidator />
            <input type="hidden" name="Input.Code" value="@Input.Code" />

            <MudTextField T="string" @bind-Value="Input.Email"
                Label="Email"
                Variant="Variant.Outlined"
                InputType="InputType.Email"
                Class="mt-6"
                autocomplete="username"
                aria-required="true" />

            <ValidationMessage For="() => Input.Email" class="mud-alert mud-alert-text-error" />

            <MudTextField @bind-Value="@Input.Password"
                Label="Password"
                Variant="Variant.Outlined"
                InputType="@passwordInput"
                Class="mt-6"
                Adornment="Adornment.End"
                AdornmentIcon="@passwordInputIcon"
                OnAdornmentClick="TogglePasswordVisibility"
                autocomplete="new-password"
                aria-required="true" />

            <ValidationMessage For="() => Input.Password" class="mud-alert mud-alert-text-error" />

            <MudTextField @bind-Value="@Input.ConfirmPassword"
                Label="Confirm Password"
                Variant="Variant.Outlined"
                InputType="@confirmPasswordInput"
                Class="mt-6"
                Adornment="Adornment.End"
                AdornmentIcon="@confirmPasswordInputIcon"
                OnAdornmentClick="ToggleConfirmPasswordVisibility"
                autocomplete="confirm-password"
                aria-required="true" />

            <ValidationMessage For="() => Input.ConfirmPassword" class="mud-alert mud-alert-text-error" />

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">
                Reset Password
            </MudButton>
        </EditForm>
    </MudPaper>
</MudStack>

@code {

    bool passwordVisibility;
    InputType passwordInput = InputType.Password;
    string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    bool confirmPasswordVisibility;
    InputType confirmPasswordInput = InputType.Password;
    string confirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private ResetPasswordFormInput Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("/invalid-password-reset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task ResetPasswordAsync()
    {
        User? user = await UserManager.FindByEmailAsync(Input.Email);

        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("/reset-password-confirmation");
        }

        IdentityResult result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);

        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("/reset-password-confirmation");
        }

        identityErrors = result.Errors;
    }

    private void TogglePasswordVisibility()
    {
        if (passwordVisibility)
        {
            passwordVisibility = false;
            passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            passwordInput = InputType.Password;
        }
        else
        {
            passwordVisibility = true;
            passwordInputIcon = Icons.Material.Filled.Visibility;
            passwordInput = InputType.Text;
        }
    }

    private void ToggleConfirmPasswordVisibility()
    {
        if (confirmPasswordVisibility)
        {
            confirmPasswordVisibility = false;
            confirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            confirmPasswordInput = InputType.Password;
        }
        else
        {
            confirmPasswordVisibility = true;
            confirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            confirmPasswordInput = InputType.Text;
        }
    }
}
