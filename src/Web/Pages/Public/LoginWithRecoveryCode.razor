@page "/login-with-recovery-code"

@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWithRecoveryCode> Logger

@attribute [AllowAnonymous]

<PageTitle>Login Recovery Code</PageTitle>

<MudStack Spacing="4" AlignItems="AlignItems.Center">
    <MudPaper Elevation="4" Class="pa-4" Width="100%">

        <PublicFormHeader>
            <MudText Typo="Typo.h1" GutterBottom="true">Login Recovery Code</MudText>
            <MudText Typo="Typo.subtitle1">
                You have requested to log in with a recovery code. 
                This login will not be remembered until you provide an authenticator app code at login or disable 2FA and login again.
            </MudText>
        </PublicFormHeader>

        <StatusMessage Message="@message" />

        <EditForm Model="Input" FormName="login-with-recovery-code" OnValidSubmit="OnValidSubmitAsync" method="post" Enhance="true">

            <DataAnnotationsValidator />

            <MudTextField T="string" @bind-Value="Input.RecoveryCode"
                Label="Recovery Code"
                Variant="Variant.Outlined"
                InputType="InputType.Email"
                Class="mt-6"
                autocomplete="off"
                aria-required="true" />
    
            <ValidationMessage For="() => Input.RecoveryCode" class="mud-alert mud-alert-text-error" />

            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true">
                Login
            </MudButton>
        </EditForm>
    </MudPaper>
</MudStack>

@code {

    private string? message;
    private User user = default!;

    [SupplyParameterFromForm]
    private LoginRecoveryCodeFormInput Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
            throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var recoveryCode = Input.RecoveryCode.Replace(" ", string.Empty);

        var result = await SignInManager.TwoFactorRecoveryCodeSignInAsync(recoveryCode);

        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with a recovery code.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("/lockout");
        }
        else
        {
            Logger.LogWarning("Invalid recovery code entered for user with ID '{UserId}' ", userId);
            message = "Error: Invalid recovery code entered.";
        }
    }
}
